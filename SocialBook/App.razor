@inject HttpClient HttpClient
@inject DockerServiceChecker dockerChecker

@if (!isIdentityApiAvailable)
{
    <div class="alert alert-danger text-center">
        <h3>⚠ IdentityAPI is not available!</h3>
        <p>Please start IdentityAPI to use the application.</p>
    </div>
}
else
{
    <CascadingAuthenticationState>
        <Router AppAssembly="@typeof(App).Assembly">
            <Found Context="routeData">
                <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                    <NotAuthorized>
                        @if (!context.User.Identity.IsAuthenticated)
                        {
                            <p>You are not authorized to access this page. Please <a href="/login">log in</a>.</p>
                        }
                        else
                        {
                            <p>You do not have permission to access this page.</p>
                        }
                    </NotAuthorized>
                    <Authorizing>
                        <p>Checking authorization...</p>
                    </Authorizing>
                </AuthorizeRouteView>
            </Found>
            <NotFound>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p>Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
    </CascadingAuthenticationState>
}

@code {
    private bool isIdentityApiAvailable = true;
    private PeriodicTimer apiCheckTimer = new PeriodicTimer(TimeSpan.FromSeconds(5));

    protected override async Task OnInitializedAsync()
    {
        await CheckApiAvailability();
        _ = MonitorApiStatus();
    }

    private async Task MonitorApiStatus()
    {
        while (await apiCheckTimer.WaitForNextTickAsync())
        {
            await CheckApiAvailability();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task CheckApiAvailability()
    {
        isIdentityApiAvailable = await dockerChecker.IsContainerRunning("socialbookwebapp-master-identity-api-1");
    }
}
